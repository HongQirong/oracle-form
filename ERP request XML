DECLARE
   p_table VARCHAR2(30) := UPPER('APPS.table');
   p_group_order VARCHAR2(4000) := UPPER('column1/column2,column3/column4');
   p_result VARCHAR2(1); --S是成功，E是錯誤
   p_error_msg VARCHAR2(4000);
   p_msg VARCHAR2(4000);

   TYPE l_vvt IS TABLE OF VARCHAR2(4000)
      INDEX BY VARCHAR2(4000);

   TYPE l_btt IS TABLE OF l_vvt --VARCHAR2(40)
      INDEX BY BINARY_INTEGER;

   TYPE l_bvt IS TABLE OF VARCHAR2(4000) --VARCHAR2(40)
      INDEX BY BINARY_INTEGER;

   TYPE l_bvtt IS TABLE OF l_bvt --VARCHAR2(40)
      INDEX BY BINARY_INTEGER;

   l_column_value_arr l_vvt;
   l_group_arr l_btt;
   l_next_group_flag_arr l_bvt;
   l_column_name_arr l_bvt;
   l_group_column_arr l_bvtt;
   l_row_num NUMBER := 0;

   l_query VARCHAR2(4000);
   l_dummy NUMBER;
   --TYPE column_map_type IS TABLE OF NUMBER INDEX BY VARCHAR2(32767);

   query2 VARCHAR2(32767);
   query3 VARCHAR2(32767);

   l_cursor INTEGER;
   l_description_table DBMS_SQL.desc_tab3;
   --l_mapping_table column_map_type;
   l_column_value VARCHAR2(4000);

   l_cursor_1 INTEGER;
   l_description_table_1 DBMS_SQL.desc_tab3;
   --l_mapping_table_1 column_map_type;
   l_column_value_1 VARCHAR2(4000);

   l_cursor_2 INTEGER;
   l_description_table_2 DBMS_SQL.desc_tab3;
   --l_mapping_table_2 column_map_type;
   l_column_value_2 VARCHAR2(4000);

   l_cursor_3 INTEGER;
   l_description_table_3 DBMS_SQL.desc_tab3;
   --l_mapping_table_3 column_map_type;
   l_column_value_3 VARCHAR2(4000);

   l_fetch_row NUMBER;
   v_error EXCEPTION; --本程式有錯， 拋例外統一處理錯誤訊息
   v_call_error EXCEPTION; --呼叫的程式拋出例外，且已有紀錄錯誤程式行
BEGIN
   DBMS_OUTPUT.enable(buffer_size => NULL);

   fnd_file.put_line(fnd_file.output
                    ,'<?xml version = ''1.0'' encoding = ''UTF-8''?>');
   fnd_file.new_line(fnd_file.output
                    ,1);
   fnd_file.put_line(fnd_file.output
                    ,'<MAIN>');
   fnd_file.new_line(fnd_file.output
                    ,1);
   DBMS_OUTPUT.put_line('<?xml version = ''1.0'' encoding = ''UTF-8''?>');
   DBMS_OUTPUT.put_line('<MAIN>');

   IF p_table IS NOT NULL
   THEN
      l_query := 'select * from '
                 || p_table
                 || ' order by ';

      SELECT l_query
             || REPLACE(p_group_order
                       ,'/'
                       ,',')
                st
        INTO l_query
        FROM DUAL;

      DBMS_OUTPUT.put_line('l_query = '
                           || l_query);
   END IF;

   --印參數
   IF (l_query IS NOT NULL)
   THEN
      l_cursor := DBMS_SQL.open_cursor;
      DBMS_SQL.parse(l_cursor
                    ,l_query
                    ,DBMS_SQL.native);
      DBMS_SQL.describe_columns3(l_cursor
                                ,l_dummy
                                ,l_description_table);

      FOR i IN 1 .. l_description_table.COUNT
      LOOP
         DBMS_SQL.define_column(l_cursor
                               ,i
                               ,l_column_value
                               ,4000);
      END LOOP;

      l_dummy := DBMS_SQL.execute(l_cursor);
      DBMS_OUTPUT.put_line('l_dummy = '
                           || l_dummy);
      DBMS_OUTPUT.put_line('p_group_order = '
                           || p_group_order);

      LOOP
         EXIT WHEN DBMS_SQL.fetch_rows(l_cursor) <= 0;
         l_row_num :=   l_row_num
                      + 1;

         FOR i IN 1 .. l_description_table.COUNT
         LOOP
            IF INSTR(TRANSLATE(','
                               || p_group_order
                               || ','
                              ,'/ '
                              ,',')
                    ,','
                     || l_description_table(i).col_name
                     || ',') = 0
            THEN
               CONTINUE;
            END IF;

            DBMS_SQL.COLUMN_VALUE(l_cursor
                                 ,i
                                 ,l_column_value);

            SELECT REPLACE(l_column_value
                          ,CHR(39)
                          ,CHR(38)
                           || 'apos;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'"'
                          ,CHR(38)
                           || 'quot;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,CHR(38)
                          ,CHR(38)
                           || 'amp;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'<'
                          ,CHR(38)
                           || 'lt;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'>'
                          ,CHR(38)
                           || 'gt;')
              INTO l_column_value
              FROM DUAL;


            FOR r_group IN (    SELECT REGEXP_SUBSTR(st
                                                    ,'[^, ]+'
                                                    ,1
                                                    ,LEVEL)
                                          group_column
                                      ,ROWNUM group_seq
                                  FROM (SELECT p_group_order st FROM DUAL)
                            CONNECT BY REGEXP_SUBSTR(st
                                                    ,'[^, ]+'
                                                    ,1
                                                    ,LEVEL)
                                          IS NOT NULL) --用","分列
            LOOP
               FOR r_column IN (    SELECT REGEXP_SUBSTR(st
                                                        ,'[^/ ]+'
                                                        ,1
                                                        ,LEVEL)
                                              column_name
                                          ,ROWNUM column_seq
                                      FROM (SELECT r_group.group_column st FROM DUAL) --每一個群組取第一個"_"之後的字串
                                CONNECT BY REGEXP_SUBSTR(st
                                                        ,'[^/ ]+'
                                                        ,1
                                                        ,LEVEL)
                                              IS NOT NULL) --用"/"分列
               LOOP
                  IF r_column.column_name != l_description_table(i).col_name
                  THEN
                     CONTINUE;
                  END IF;

                  IF l_group_arr.EXISTS(r_group.group_seq)
                     AND l_group_arr(r_group.group_seq).EXISTS(r_column.column_name)
                     AND l_group_arr(r_group.group_seq)(r_column.column_name) = l_column_value
                  THEN
                     CONTINUE;
                  ELSE
                     l_column_value_arr(r_column.column_name) := l_column_value;
                     l_group_arr(r_group.group_seq) := l_column_value_arr;
                     l_next_group_flag_arr(r_group.group_seq) := 'Y';
                     --                     DBMS_OUTPUT.put_line('r_column.column_seq = '
                     --                                          || r_column.column_seq);
                     --                     DBMS_OUTPUT.put_line('r_column.column_name = '
                     --                                          || r_column.column_name);
                     --                     DBMS_OUTPUT.put_line('r_group.group_seq = '
                     --                                          || r_group.group_seq);

                     l_column_name_arr(r_column.column_seq) := r_column.column_name;
                     l_group_column_arr(r_group.group_seq) := l_column_name_arr;
                  END IF;
               END LOOP;
            END LOOP;
         --            DBMS_OUTPUT.put_line('l_group = '
         --                                 || l_group(1)('PAY_GROUP'));
         --            DBMS_OUTPUT.put_line('l_group = '
         --                                 || l_group(1)('DUE_DATE'));
         --            DBMS_OUTPUT.put_line('l_group = '
         --                                 || l_group(2)('VENDOR_ID'));
         --            DBMS_OUTPUT.put_line('l_group = '
         --                                 || l_group(2)('BATCH_NAME'));

         END LOOP;

         FOR r_g_seq IN 1 .. l_next_group_flag_arr.COUNT
         LOOP
            IF l_next_group_flag_arr.EXISTS(  r_g_seq
                                            - 1)
               AND l_next_group_flag_arr(  r_g_seq
                                         - 1) = 'Y'
            THEN
               l_next_group_flag_arr(r_g_seq) := 'Y';
            END IF;
         END LOOP;


         IF l_row_num > 1
         THEN
            FOR r_seq IN REVERSE 1 .. l_group_arr.COUNT
            LOOP
               IF l_next_group_flag_arr(r_seq) = 'N'
               THEN
                  CONTINUE;
               END IF;

               apps.fnd_file.put_line(apps.fnd_file.output
                                     ,'</G'
                                      || r_seq
                                      || '>');
               DBMS_OUTPUT.put_line('</G'
                                    || r_seq
                                    || '>');
            END LOOP;
         END IF;

         FOR r_g_seq IN 1 .. l_group_arr.COUNT
         LOOP
            IF l_next_group_flag_arr(r_g_seq) = 'N'
            THEN
               CONTINUE;
            END IF;

            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'<G'
                                   || r_g_seq
                                   || '>');
            DBMS_OUTPUT.put_line('<G'
                                 || r_g_seq
                                 || '>');

            FOR r_c_seq IN 1 .. l_group_column_arr(r_g_seq).COUNT
            LOOP
               fnd_file.put(fnd_file.output
                           ,'<'
                            || l_group_column_arr(r_g_seq)(r_c_seq)
                            || '>');

               fnd_file.put(fnd_file.output
                           ,l_group_arr(r_g_seq)(l_group_column_arr(r_g_seq)(r_c_seq)));
               fnd_file.put_line(fnd_file.output
                                ,'</'
                                 || l_group_column_arr(r_g_seq)(r_c_seq)
                                 || '>');
               DBMS_OUTPUT.put('<'
                               || l_group_column_arr(r_g_seq)(r_c_seq)
                               || '>');
               DBMS_OUTPUT.put(l_group_arr(r_g_seq)(l_group_column_arr(r_g_seq)(r_c_seq)));
               DBMS_OUTPUT.put_line('<'
                                    || l_group_column_arr(r_g_seq)(r_c_seq)
                                    || '>');
            END LOOP;

            l_next_group_flag_arr(r_g_seq) := 'N';
         END LOOP;

         FOR i IN 1 .. l_description_table.COUNT
         LOOP
            IF INSTR(TRANSLATE(p_group_order
                              ,'/ '
                              ,',')
                    ,','
                     || l_description_table(i).col_name
                     || ',') > 0
            THEN
               CONTINUE;
            END IF;

            DBMS_SQL.COLUMN_VALUE(l_cursor
                                 ,i
                                 ,l_column_value);

            SELECT REPLACE(l_column_value
                          ,CHR(39)
                          ,CHR(38)
                           || 'apos;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'"'
                          ,CHR(38)
                           || 'quot;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,CHR(38)
                          ,CHR(38)
                           || 'amp;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'<'
                          ,CHR(38)
                           || 'lt;')
              INTO l_column_value
              FROM DUAL;

            SELECT REPLACE(l_column_value
                          ,'>'
                          ,CHR(38)
                           || 'gt;')
              INTO l_column_value
              FROM DUAL;

            IF i = 1
            THEN
               apps.fnd_file.put_line(apps.fnd_file.output
                                     ,'<G>');
               DBMS_OUTPUT.put_line('<G>');
            END IF;

            fnd_file.put(fnd_file.output
                        ,'<'
                         || l_description_table(i).col_name
                         || '>');
            fnd_file.put(fnd_file.output
                        ,l_column_value);
            fnd_file.put_line(fnd_file.output
                             ,'</'
                              || l_description_table(i).col_name
                              || '>');

            DBMS_OUTPUT.put('<'
                            || l_description_table(i).col_name
                            || '>');
            DBMS_OUTPUT.put(l_column_value);
            DBMS_OUTPUT.put_line('</'
                                 || l_description_table(i).col_name
                                 || '>');
         END LOOP;

         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'</G>');
         DBMS_OUTPUT.put_line('</G>');
      END LOOP;

      FOR r_seq IN REVERSE 1 .. l_group_arr.COUNT
      LOOP
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'</G'
                                || r_seq
                                || '>');
         DBMS_OUTPUT.put_line('</G'
                              || r_seq
                              || '>');
      END LOOP;


      DBMS_SQL.close_cursor(l_cursor);
   END IF;

   DBMS_OUTPUT.put('<ERRMSG>');
   DBMS_OUTPUT.put('');
   DBMS_OUTPUT.put_line('</ERRMSG>');
   DBMS_OUTPUT.put_line('</MAIN>');
   fnd_file.put(fnd_file.output
               ,'<ERRMSG>');
   fnd_file.put(fnd_file.output
               ,'');
   fnd_file.put_line(fnd_file.output
                    ,'</ERRMSG>');
   fnd_file.new_line(fnd_file.output
                    ,1);
   fnd_file.put_line(fnd_file.output
                    ,'</MAIN>');
   fnd_file.new_line(fnd_file.output
                    ,1);
EXCEPTION
   WHEN v_call_error
   THEN
      p_result := 'E';
   WHEN v_error
   THEN
      p_result := 'E';
      p_error_msg := SUBSTR(p_error_msg
                            || CHR(10)
                            || '此次執行的程式:'
                            || CHR(10)
                            || DBMS_UTILITY.format_error_stack
                            || DBMS_UTILITY.format_error_backtrace
                            || DBMS_UTILITY.format_call_stack
                           ,1
                           ,600);
      fnd_file.put(fnd_file.output
                  ,'<ERRMSG>');
      fnd_file.put(fnd_file.output
                  ,p_error_msg);
      fnd_file.put_line(fnd_file.output
                       ,'</ERRMSG>');
      fnd_file.new_line(fnd_file.output
                       ,1);
      fnd_file.put_line(fnd_file.output
                       ,'</MAIN>');
      fnd_file.new_line(fnd_file.output
                       ,1);
      DBMS_OUTPUT.put('<ERRMSG>');
      DBMS_OUTPUT.put(p_error_msg);
      DBMS_OUTPUT.put_line('</ERRMSG>');
      DBMS_OUTPUT.put_line('</MAIN>');
   WHEN OTHERS
   THEN
      p_result := 'E';
      p_error_msg := SUBSTR(p_error_msg
                            || CHR(10)
                            || '此次執行的程式:'
                            || CHR(10)
                            || DBMS_UTILITY.format_error_stack
                            || DBMS_UTILITY.format_error_backtrace
                            || DBMS_UTILITY.format_call_stack
                           ,1
                           ,600);
      fnd_file.put(fnd_file.output
                  ,'<ERRMSG>');
      fnd_file.put(fnd_file.output
                  ,p_error_msg);
      fnd_file.put_line(fnd_file.output
                       ,'</ERRMSG>');
      fnd_file.new_line(fnd_file.output
                       ,1);
      fnd_file.put_line(fnd_file.output
                       ,'</MAIN>');
      fnd_file.new_line(fnd_file.output
                       ,1);
      DBMS_OUTPUT.put('<ERRMSG>');
      DBMS_OUTPUT.put(p_error_msg);
      DBMS_OUTPUT.put_line('</ERRMSG>');
      DBMS_OUTPUT.put_line('</MAIN>');
END;
/
------------------------------------------------------------------
/*
<?for-each-group: G_1;./C1_SHEET_NAME?><?spreadsheet-sheet-name:{C1_SHEET_NAME}?> <?if:C1_SHEET_NAME ='報表A'?>
報表A
COLUMN1	COLUMN2	COLUMN3
<?for-each:G_2?> <?COLUMN1?> <?COLUMN2?> <?COLUMN3?> <?end for-each?>

<?end if?><?if:C1_SHEET_NAME ='報表B'?>
報表B
COLUMN1	COLUMN2	COLUMN3
<?for-each:G_2?> <?COLUMN1?> <?COLUMN2?> <?COLUMN3?> <?end for-each?>

<?end if?>
<?split-by-page-break:?><?end for-each-group?>
*/
----------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE XXMULTISHEET(RET_MSG OUT VARCHAR2
                                         ,RET_CODE OUT VARCHAR2) IS

 sqlp varchar2(1000);
 sql1 varchar2(1000);
 sql2 varchar2(1000);
 sql3 varchar2(1000);
BEGIN
sqlp := '';
sql1 := '';
sql2 := '';
sql3 := '';


sql1 := '
    select ''報表A'' as C1_SHEET_NAME from dual
    UNION
    select ''報表B'' as C1_SHEET_NAME from dual
';

sql2 := '
select * from (
select ''報表A'' as SHEET_NAME
, ''AAA1'' as COLUMNA1
, ''BBB1'' as COLUMNA2
, ''CCC1'' as COLUMNA3 from dual
UNION
select ''報表B'' as SHEET_NAME
, ''AAA3'' as COLUMNB1
, ''BBB3'' as COLUMNB2
, ''CCC3'' as COLUMNB3 from dual
)
where SHEET_NAME = ''C1_SHEET_NAME''
';



XXFND_XMLCREATOR_SP(sqlp,sql1, sql2, sql3);




EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
END XXJBHOMEWORK2;
/
CREATE OR REPLACE PROCEDURE APPS.XXFND_XMLCREATOR_SP(p_query IN VARCHAR2
                                            ,p_query1 IN VARCHAR2
                                            ,p_query2 IN VARCHAR2
                                            ,p_query3 IN VARCHAR2) IS

    l_dummy             NUMBER;
    --TYPE column_map_type IS TABLE OF NUMBER INDEX BY VARCHAR2(32767);

    query2            VARCHAR2(32767);
    query3            VARCHAR2(32767);

    l_cursor           INTEGER;
    l_description_table dbms_sql.desc_tab3;
    --l_mapping_table column_map_type;
    l_column_value  VARCHAR2(4000);

    l_cursor_1           INTEGER;
    l_description_table_1 dbms_sql.desc_tab3;
    --l_mapping_table_1 column_map_type;
    l_column_value_1  VARCHAR2(4000);

    l_cursor_2           INTEGER;
    l_description_table_2 dbms_sql.desc_tab3;
    --l_mapping_table_2 column_map_type;
    l_column_value_2  VARCHAR2(4000);

    l_cursor_3           INTEGER;
    l_description_table_3 dbms_sql.desc_tab3;
    --l_mapping_table_3 column_map_type;
    l_column_value_3  VARCHAR2(4000);

    l_injection_error          EXCEPTION;
    l_noPara_error          EXCEPTION;

BEGIN
    DBMS_OUTPUT.ENABLE(buffer_size=>null);

    fnd_file.put_line(fnd_file.output, '<?xml version = ''1.0'' encoding = ''UTF-8''?>');
    fnd_file.new_line(fnd_file.output,1);
    fnd_file.put_line(fnd_file.output, '<MAIN>');
    fnd_file.new_line(fnd_file.output,1);
    dbms_output.put_line('<?xml version = ''1.0'' encoding = ''UTF-8''?>');
    dbms_output.put_line('<MAIN>');

    --印參數
    IF (p_query IS NOT NULL) THEN
      --RAISE l_noPara_error;
    --ELSE
        l_cursor := dbms_sql.open_cursor;
        dbms_sql.parse(l_cursor, p_query, dbms_sql.native);
        dbms_sql.describe_columns3(l_cursor, l_dummy, l_description_table);
        FOR i IN 1 .. l_description_table.count LOOP
                  --    l_mapping_table(l_description_table(i).col_name) := i;
            dbms_sql.define_column(l_cursor, i, l_column_value, 4000);
        END LOOP;
        l_dummy := dbms_sql.execute(l_cursor);
        LOOP
            EXIT WHEN dbms_sql.fetch_rows(l_cursor) <= 0;

            FOR i IN 1 .. l_description_table.count LOOP
                --dbms_sql.column_value(l_cursor, l_mapping_table(l_description_table(i).col_name), l_column_value);
                IF NOT regexp_like(l_column_value,'^[^:=;\'']+$')
                OR REGEXP_INSTR(l_column_value,'--',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'SELECT',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'INSERT',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'UPDATE',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'DELETE',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'DROP',1) >= 1
                OR REGEXP_INSTR(UPPER(l_column_value),'CREATE',1) >= 1
                THEN
                  RAISE l_injection_error;
                END IF;
                                
                dbms_sql.column_value(l_cursor, i, l_column_value);

                fnd_file.put(fnd_file.output, '<'||l_description_table(i).col_name||'>');
                fnd_file.put(fnd_file.output, l_column_value);
                fnd_file.put_line(fnd_file.output, '</'||l_description_table(i).col_name||'>');

                dbms_output.put('<'||l_description_table(i).col_name||'>');
                dbms_output.put(l_column_value);
                dbms_output.put_line('</'||l_description_table(i).col_name||'>');

            END LOOP;
        END LOOP;
        dbms_sql.close_cursor(l_cursor);
    END IF;

    l_cursor_1 := dbms_sql.open_cursor;
    dbms_sql.parse(l_cursor_1, p_query1, dbms_sql.native);
    dbms_sql.describe_columns3(l_cursor_1, l_dummy, l_description_table_1);
    FOR i IN 1 .. l_description_table_1.count LOOP
        --l_mapping_table_1(l_description_table_1(i).col_name) := i;
        dbms_sql.define_column(l_cursor_1, i, l_column_value_1, 4000);
    END LOOP;
    l_dummy := dbms_sql.execute(l_cursor_1);
    LOOP
        EXIT WHEN dbms_sql.fetch_rows(l_cursor_1) <= 0;

        query2 := p_query2;

        fnd_file.put_line(fnd_file.output, '<G_1>');
        fnd_file.new_line(fnd_file.output,1);
        dbms_output.put_line('<G_1>');
        --產生query1的欄位資料
        FOR i IN 1 .. l_description_table_1.count LOOP
            --dbms_sql.column_value(l_cursor_1, l_mapping_table_1(l_description_table_1(i).col_name), l_column_value_1);
            
            dbms_sql.column_value(l_cursor_1, i, l_column_value_1);
            fnd_file.put(fnd_file.output, '<'||l_description_table_1(i).col_name||'>');
            fnd_file.put(fnd_file.output, replace(l_column_value_1, '&', '＆'));
            fnd_file.put_line(fnd_file.output, '</'||l_description_table_1(i).col_name||'>');

            dbms_output.put('<'||l_description_table_1(i).col_name||'>');
            dbms_output.put(replace(l_column_value_1, '&', '＆'));
            dbms_output.put_line('</'||l_description_table_1(i).col_name||'>');

            --把query1的參數傳到query2
            IF NOT(query2 IS NULL) THEN
                IF INSTR(query2, 'C1_') > 0 AND INSTR(l_description_table_1(i).col_name, 'C1_') > 0 THEN
                    query2 := replace(query2, l_description_table_1(i).col_name, l_column_value_1);
                END IF;
            END IF;
        END LOOP;

        IF NOT(query2 IS NULL) THEN
            l_cursor_2 := dbms_sql.open_cursor;
            dbms_sql.parse(l_cursor_2, query2, dbms_sql.native);
            dbms_sql.describe_columns3(l_cursor_2, l_dummy, l_description_table_2);
            FOR j IN 1 .. l_description_table_2.count LOOP
                --l_mapping_table_2(l_description_table_2(j).col_name) := j;
                dbms_sql.define_column(l_cursor_2, j, l_column_value_2, 4000);
            END LOOP;
            l_dummy := dbms_sql.execute(l_cursor_2);

            LOOP
                EXIT WHEN dbms_sql.fetch_rows(l_cursor_2) <= 0;

                query3 := p_query3;

                fnd_file.put_line(fnd_file.output, '<G_2>');
                fnd_file.new_line(fnd_file.output,1);
                dbms_output.put_line('<G_2>');
                FOR i IN 1 .. l_description_table_1.count LOOP
                    --dbms_sql.column_value(l_cursor_1, l_mapping_table_1(l_description_table_1(i).col_name), l_column_value_1);
                    dbms_sql.column_value(l_cursor_1, i, l_column_value_1);

                    --把query1的參數傳到query3
                    IF NOT(query3 IS NULL) THEN
                        IF INSTR(query3, 'C1_') > 0 AND INSTR(l_description_table_1(i).col_name, 'C1_') > 0 THEN
                            query3 := replace(query3, l_description_table_1(i).col_name, l_column_value_1);
                        END IF;
                    END IF;
                END LOOP;
                FOR j IN 1 .. l_description_table_2.count LOOP
                    --dbms_sql.column_value(l_cursor_2, l_mapping_table_2(l_description_table_2(j).col_name), l_column_value_2);
                    dbms_sql.column_value(l_cursor_2, j, l_column_value_2);

                    fnd_file.put(fnd_file.output, '<'||l_description_table_2(j).col_name||'>');
                    fnd_file.put(fnd_file.output, replace(l_column_value_2, '&', '＆'));
                    fnd_file.put_line(fnd_file.output, '</'||l_description_table_2(j).col_name||'>');

                    dbms_output.put('<'||l_description_table_2(j).col_name||'>');
                    dbms_output.put(replace(l_column_value_2, '&', '＆'));
                    dbms_output.put_line('</'||l_description_table_2(j).col_name||'>');

                    --把query2的參數傳到query3
                    IF NOT(query3 IS NULL) THEN
                        IF INSTR(query3, 'C2_') > 0 AND INSTR(l_description_table_2(j).col_name, 'C2_') > 0 THEN
                            query3 := replace(query3, l_description_table_2(j).col_name, l_column_value_2);
                        END IF;
                    END IF;
                END LOOP;


                IF NOT(query3 IS NULL) THEN
                    l_cursor_3 := dbms_sql.open_cursor;
                    dbms_sql.parse(l_cursor_3, query3, dbms_sql.native);
                    dbms_sql.describe_columns3(l_cursor_3, l_dummy, l_description_table_3);
                    FOR k IN 1 .. l_description_table_3.count LOOP
                        --l_mapping_table_3(l_description_table_3(k).col_name) := k;
                        dbms_sql.define_column(l_cursor_3, k, l_column_value_3, 4000);
                    END LOOP;
                    l_dummy := dbms_sql.execute(l_cursor_3);
                    LOOP
                        EXIT WHEN dbms_sql.fetch_rows(l_cursor_3) <= 0;

                        fnd_file.put_line(fnd_file.output, '<G_3>');
                        fnd_file.new_line(fnd_file.output,1);
                        dbms_output.put_line('<G_3>');
                        FOR k IN 1 .. l_description_table_3.count LOOP
                            --dbms_sql.column_value(l_cursor_3, l_mapping_table_3(l_description_table_3(k).col_name), l_column_value_3);
                            dbms_sql.column_value(l_cursor_3, k, l_column_value_3);

                            fnd_file.put(fnd_file.output, '<'||l_description_table_3(k).col_name||'>');
                            fnd_file.put(fnd_file.output, replace(l_column_value_3, '&', '＆'));
                            fnd_file.put_line(fnd_file.output, '</'||l_description_table_3(k).col_name||'>');

                            dbms_output.put('<'||l_description_table_3(k).col_name||'>');
                            dbms_output.put(replace(l_column_value_3, '&', '＆'));
                            dbms_output.put_line('</'||l_description_table_3(k).col_name||'>');
                        END LOOP;
                        fnd_file.put_line(fnd_file.output, '</G_3>');
                        fnd_file.new_line(fnd_file.output,1);
                        dbms_output.put_line('</G_3>');
                    END LOOP;
                    dbms_sql.close_cursor(l_cursor_3);
                END IF;
                fnd_file.put_line(fnd_file.output, '</G_2>');
                fnd_file.new_line(fnd_file.output,1);
                dbms_output.put_line('</G_2>');
            END LOOP;
            dbms_sql.close_cursor(l_cursor_2);
        END IF;
        fnd_file.put_line(fnd_file.output, '</G_1>');
        fnd_file.new_line(fnd_file.output,1);
        dbms_output.put_line('</G_1>');
    END LOOP;
    dbms_sql.close_cursor(l_cursor_1);

    dbms_output.put('<ERRMSG>');
    dbms_output.put('');
    dbms_output.put_line('</ERRMSG>');
    dbms_output.put_line('</MAIN>');
    fnd_file.put(fnd_file.output, '<ERRMSG>');
    fnd_file.put(fnd_file.output, '');
    fnd_file.put_line(fnd_file.output, '</ERRMSG>');
    fnd_file.new_line(fnd_file.output,1);
    fnd_file.put_line(fnd_file.output, '</MAIN>');
    fnd_file.new_line(fnd_file.output,1);

EXCEPTION
  WHEN l_injection_error THEN
        dbms_output.put('<ERRMSG>');
        dbms_output.put('SQL Injection Error');
        dbms_output.put_line('</ERRMSG>');
        dbms_output.put_line('</MAIN>');
        fnd_file.put(fnd_file.output, '<ERRMSG>');
        fnd_file.put(fnd_file.output, 'SQL Injection Error');
        fnd_file.put_line(fnd_file.output, '</ERRMSG>');
        fnd_file.new_line(fnd_file.output,1);
        fnd_file.put_line(fnd_file.output, '</MAIN>');
        fnd_file.new_line(fnd_file.output,1);
  WHEN l_noPara_error THEN
        dbms_output.put('<ERRMSG>');
        dbms_output.put('Parameter SQL Required(sqlp)');
        dbms_output.put_line('</ERRMSG>');
        dbms_output.put_line('</MAIN>');
        fnd_file.put(fnd_file.output, '<ERRMSG>');
        fnd_file.put(fnd_file.output, 'SQL Injection Error');
        fnd_file.put_line(fnd_file.output, '</ERRMSG>');
        fnd_file.new_line(fnd_file.output,1);
        fnd_file.put_line(fnd_file.output, '</MAIN>');
        fnd_file.new_line(fnd_file.output,1);
    WHEN OTHERS THEN
        fnd_file.put(fnd_file.output, '<ERRMSG>');
        fnd_file.put(fnd_file.output, 'Region not present '||sqlerrm);
        fnd_file.put_line(fnd_file.output, '</ERRMSG>');
        fnd_file.new_line(fnd_file.output,1);
        fnd_file.put_line(fnd_file.output, '</MAIN>');
        fnd_file.new_line(fnd_file.output,1);
        dbms_output.put('<ERRMSG>');
        dbms_output.put('Region not present '||sqlerrm);
        dbms_output.put_line('</ERRMSG>');
        dbms_output.put_line('</MAIN>');
    ROLLBACK;

END XXFND_XMLCREATOR_SP;
/
CREATE OR REPLACE PACKAGE BODY apps.xxapry008_pkg
IS
   -------------------------------------------------------------------------------------
   --月結總表給號程式
   PROCEDURE generate_total_seq(p_period_ym IN VARCHAR2)
   AS
      CURSOR c
      IS
           SELECT aia.org_id
                 ,av.vendor_id
                 ,aia.vendor_site_id
                 ,aia.invoice_id
                 ,aia.invoice_type_lookup_code
                 ,av.vendor_name
                 ,aia.invoice_num
             FROM ap_suppliers av
                 ,ap_invoices_all aia
                 ,ap_batches_all aba
            WHERE 1 = 1
                  AND av.vendor_id = aia.vendor_id
                  AND aia.batch_id = aba.batch_id(+)
                  AND NVL(aia.attribute14, 'X') = 'Y'
                  AND TO_CHAR(aia.gl_date
                             ,'RRRRMM') = p_period_ym
                  AND aia.org_id IN (SELECT hou.organization_id
                                       FROM hr_operating_units hou
                                      WHERE hou.set_of_books_id = 2022)
                  AND aia.pay_group_lookup_code IN (SELECT flv.lookup_code
                                                      FROM fnd_lookup_values flv
                                                     WHERE 1 = 1
                                                           AND flv.lookup_type = 'PAY GROUP'
                                                           AND flv.language = 'ZHT'
                                                           AND (flv.description LIKE '%台北月結%'))
         /*
         AND AIA.PAY_GROUP_LOOKUP_CODE NOT IN
             (SELECT FLV.LOOKUP_CODE
                FROM FND_LOOKUP_VALUES FLV
               WHERE 1 = 1
                 AND FLV.LOOKUP_TYPE = 'PAY GROUP'
                 AND FLV.LANGUAGE = 'ZHT'
                 AND (FLV.DESCRIPTION LIKE '%國內採購%' OR FLV.DESCRIPTION LIKE '%不定期付款%')
             )
         AND AIA.BATCH_ID IN
             (SELECT BATCH_ID
                FROM (SELECT ABA.BATCH_ID
                            ,AIA1.PAY_GROUP_LOOKUP_CODE
                        FROM AP_BATCHES_ALL  ABA
                            ,AP_INVOICES_ALL AIA1
                       WHERE ABA.BATCH_ID(+) = AIA1.BATCH_ID
                         AND TO_CHAR(AIA1.GL_DATE, 'RRRRMM') = P_PERIOD_YM
                       GROUP BY ABA.BATCH_ID
                               ,AIA1.PAY_GROUP_LOOKUP_CODE)
              HAVING COUNT(*) > 1
               GROUP BY BATCH_ID)
       */
         ORDER BY av.vendor_name
                 ,aba.batch_name
                 ,aia.pay_group_lookup_code
                 ,aia.invoice_num
                 ,(SELECT NVL(SUM(  t.invoice_amount
                                  * NVL(t.exchange_rate, 1))
                             ,0)
                     FROM ap_invoices_all t
                    WHERE t.org_id = aba.org_id
                          AND t.batch_id = aba.batch_id
                          AND NVL(aia.attribute14, 'X') = 'Y'
                          AND TO_CHAR(aia.gl_date
                                     ,'RRRRMM') = p_period_ym) DESC;

      l_period_ym VARCHAR2(10);
      l_batch_num NUMBER := 0;
      l_detail_num NUMBER := 0;
   BEGIN
      --updae invoice attribute15 null
      UPDATE ap_invoices_all t
         SET t.attribute15 = NULL
       WHERE TO_CHAR(t.gl_date
                    ,'RRRRMM') = p_period_ym;

      COMMIT;

      --UPDATE BATCH INVOICE
      FOR lc IN c
      LOOP
         l_batch_num :=   l_batch_num
                        + 1;

         UPDATE ap_invoices_all aia
            SET aia.attribute15 = l_batch_num
          WHERE aia.org_id = lc.org_id
                AND aia.vendor_id = lc.vendor_id
                AND aia.vendor_site_id = lc.vendor_site_id
                AND aia.invoice_type_lookup_code = lc.invoice_type_lookup_code
                AND aia.invoice_id = lc.invoice_id;

         --dbms_output.put_line(LC.INVOICE_ID);
         COMMIT;
      END LOOP;
   END generate_total_seq;

   -------------------------------------------------------------------------------------
   PROCEDURE main(errbuf                 OUT VARCHAR2
                 ,retcode                OUT VARCHAR2
                 ,p_org_id            IN     NUMBER
                 ,p_user_id           IN     NUMBER
                 ,p_batch_name        IN     VARCHAR2
                 ,p_monthly_cycle     IN     VARCHAR2
                 ,p_pay_group_code_fm IN     VARCHAR2
                 ,p_pay_group_code_to IN     VARCHAR2
                 ,p_period_name       IN     VARCHAR2
                 ,p_payment_method    IN     VARCHAR2
                 ,p_due_date          IN     VARCHAR2
                 ,p_page_group        IN     VARCHAR2 --'PAY_GROUP_PERIOD_NAME_DUE_DATE'表示依付款群組、應付帳款期間、排定付款日期同頁
                                                     )
   IS
      i NUMBER := 1;
      j NUMBER := 1;
      k NUMBER := 1;
      v_user VARCHAR2(30);
      v_gl_date_fm DATE;
      v_gl_date_to DATE;
      v_registration_num VARCHAR2(10) := '';
      v_page_group VARCHAR2(32767);
      v_error EXCEPTION;
      v_call_error EXCEPTION;
   BEGIN
      --Mo_Global.init ('SQLAP');
      EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_LANGUAGE = ''AMERICAN''';

      SELECT gps.start_date
            ,gps.end_date
        INTO v_gl_date_fm
            ,v_gl_date_to
        FROM gl_period_statuses gps
       WHERE 1 = 1
             AND gps.ledger_id IN (SELECT hou.set_of_books_id
                                     FROM hr_operating_units hou
                                    WHERE hou.organization_id = p_org_id)
             AND gps.period_name = p_period_name
             AND gps.application_id IN (SELECT fa.application_id
                                          FROM fnd_application fa
                                         WHERE fa.application_short_name = 'SQLAP');

      xxapry008_pkg.generate_total_seq(TO_CHAR(v_gl_date_fm
                                              ,'RRRRMM'));

      SELECT description
        INTO v_user
        FROM fnd_user
       WHERE user_id = p_user_id;

      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'--------------------');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_ORG_ID='''
                             || p_org_id
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_USER_ID='''
                             || p_user_id
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_BATCH_NAME='''
                             || p_batch_name
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_PAY_GROUP_CODE_FMD='''
                             || p_pay_group_code_fm
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_PAY_GROUP_CODE_TO='''
                             || p_pay_group_code_to
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_PERIOD_NAME='''
                             || p_period_name
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_MONTHLY_CYCLE='''
                             || p_monthly_cycle
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'P_PAYMENT_METHOD='''
                             || p_payment_method
                             || '''');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,'---------------------');
      apps.fnd_file.put_line(apps.fnd_file.LOG
                            ,fnd_profile.VALUE('ICX_CLIENT_IANA_ENCODING'));

      --apps.FND_FILE.put_line(apps.fnd_file.OUTPUT,'<?xml version="1.0" encoding="'||fnd_profile.value('ICX_CLIENT_IANA_ENCODING')||'"?>');
      --apps.FND_FILE.put_line(apps.fnd_file.OUTPUT,'<?xml version="1.0" encoding="BIG5"?>');
      apps.fnd_file.put_line(apps.fnd_file.output
                            ,'<?xml version="1.0"?>');
      apps.fnd_file.put_line(apps.fnd_file.output
                            ,'<ROWSET>');
      apps.fnd_file.put_line(apps.fnd_file.output
                            ,'<REPORT_NAME>XXAPRY008</REPORT_NAME>');


      FOR c_ap IN (  SELECT aia.org_id
                           ,aba.batch_name
                           ,aia.invoice_id
                           ,aia.vendor_id
                           ,av.vendor_name
                           ,aia.invoice_num
                           ,DECODE(aps.payment_method_code, 'CHECK', '', ibybnk.masked_bank_account_num) bank_account_num
                           ,DECODE(aps.payment_method_code
                                  ,'CHECK', ''
                                  ,(cbb.bank_name
                                    || cbb.bank_branch_name))
                               bank_account_name
                           ,  NVL((SELECT SUM(NVL(ail.amount, 0))
                                     FROM ap_invoice_lines_all ail
                                    WHERE ail.invoice_id = aia.invoice_id
                                          AND ail.line_type_lookup_code <> 'PREPAY')
                                 ,0)
                            - NVL(ap_invoices_utility_pkg.get_prepay_amount_applied(aia.invoice_id), 0)
                               invoice_amount
                           ,CASE
                               WHEN ROW_NUMBER()
                                       OVER(PARTITION BY aia.pay_group_lookup_code
                                                        ,av.vendor_name
                                                        ,TO_CHAR(aps.due_date
                                                                ,'YYYYMMDD')
                                            ORDER BY
                                               aia.pay_group_lookup_code
                                              ,av.vendor_name
                                              ,TO_CHAR(aps.due_date
                                                      ,'YYYYMMDD')
                                              ,aba.batch_name
                                              ,aia.invoice_num) = 1
                               THEN
                                  SUM(  NVL(ap_invoices_utility_pkg.get_line_total(aia.invoice_id), 0)
                                      - NVL(ap_invoices_pkg.get_amount_withheld(aia.invoice_id), 0)
                                      - NVL(ap_prepay_utils_pkg.get_prepaid_amount(aia.invoice_id), 0))
                                  OVER(PARTITION BY aia.pay_group_lookup_code
                                                   ,av.vendor_name
                                                   ,TO_CHAR(aps.due_date
                                                           ,'YYYYMMDD'))
                            END
                               invoice_sum
                           ,(SELECT NVL(SUM(aid.amount), 0)
                               FROM ap_invoice_distributions_all aid
                                   ,gl_code_combinations gcc
                              WHERE aid.dist_code_combination_id = gcc.code_combination_id
                                    AND aia.org_id = aia.org_id
                                    AND aia.invoice_id = aid.invoice_id
                                    AND gcc.segment3 = '119071')
                               tax_amount
                           ,at.name terms_name
                           ,aia.pay_group_lookup_code
                            || '-'
                            || flv.meaning
                               pay_group
                           ,TO_CHAR(aps.due_date
                                   ,'YYYY/MM/DD')
                               due_date
                           ,aps.payment_method_code
                           ,ipm.payment_method_name
                           ,DECODE(NVL(aia.attribute15, 'XXX')
                                  ,'XXX', ''
                                  ,'批次'
                                   || aia.attribute15)
                               total_seq
                           ,DECODE(p_page_group --p_page_group --'PAY_GROUP_PERIOD_NAME_DUE_DATE'
                                  ,'PAY_GROUP_PERIOD_NAME_DUE_DATE', aia.pay_group_lookup_code
                                                                     || '-'
                                                                     || flv.meaning
                                                                     || CHR(10)
                                                                     || '排定付款日'
                                                                     || TO_CHAR(aps.due_date
                                                                               ,'YYYY/MM/DD')
                                  ,aia.pay_group_lookup_code
                                   || '-'
                                   || flv.meaning)
                               page_group
                           ,aia.pay_group_lookup_code
                       FROM ap_batches_all aba
                           ,ap_invoices_all aia
                           ,ap_payment_schedules_all aps
                           ,ap_suppliers av
                           ,ap_terms_vl at
                           ,fnd_lookup_values flv
                           ,iby_ext_bank_accounts ibybnk
                           ,ce_bank_branches_v cbb
                           ,iby_payment_methods_tl ipm
                      WHERE aba.batch_id(+) = aia.batch_id
                            AND aia.invoice_id = aps.invoice_id
                            AND aps.payment_method_code = ipm.payment_method_code
                            AND ipm.language = 'ZHT'
                            AND aia.vendor_id = av.vendor_id(+)
                            AND aia.external_bank_account_id = ibybnk.ext_bank_account_id(+)
                            AND cbb.branch_party_id(+) = ibybnk.branch_id
                            AND cbb.bank_party_id(+) = ibybnk.bank_id
                            AND aia.terms_id = at.term_id(+)
                            AND aia.pay_group_lookup_code = flv.lookup_code(+)
                            AND flv.lookup_type = 'PAY GROUP'
                            AND flv.language = 'ZHT'
                            AND ap_invoices_pkg.get_approval_status(aia.invoice_id
                                                                   ,aia.invoice_amount
                                                                   ,aia.payment_status_flag
                                                                   ,aia.invoice_type_lookup_code) IN ('APPROVED'
                                                                                                     ,'UNPAID')
                            AND aia.org_id = p_org_id --87 -- p_org_id --87
                            AND TO_CHAR(aia.gl_date
                                       ,'MON-YY') = p_period_name -- 'MAY-23' -- p_period_name -- 'MAY-23'
                            AND aba.batch_name = NVL(p_batch_name, aba.batch_name)
                            AND TO_CHAR(aps.due_date
                                       ,'YYYY/MM/DD') = NVL(p_due_date
                                                           ,TO_CHAR(aps.due_date
                                                                   ,'YYYY/MM/DD'))
                            AND (aia.pay_group_lookup_code BETWEEN p_pay_group_code_fm AND p_pay_group_code_to
                                 OR p_pay_group_code_fm IS NULL
                                 OR p_pay_group_code_to IS NULL)
                            AND flv.meaning LIKE
                                   '%'
                                   || p_monthly_cycle
                            AND flv.meaning NOT LIKE
                                   '%'
                                   || DECODE(p_monthly_cycle, '月結', '半月結', 'NULL')
                            AND aps.payment_method_code = NVL(p_payment_method, aps.payment_method_code)
                   --AND AIA.GL_DATE >= TO_DATE('20170301','YYYYMMDD')
                   ORDER BY page_group
                           ,av.vendor_name
                           ,aps.due_date
                           ,aba.batch_name
                           ,aia.invoice_num)
      LOOP
         IF v_page_group IS NOT NULL
            AND v_page_group != c_ap.page_group
         THEN
            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'</G_PAY_GROUP>');
         END IF;

         IF v_page_group IS NULL
            OR v_page_group != c_ap.page_group
         THEN
            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'<G_PAY_GROUP number="'
                                   || j
                                   || '">');

            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'  <PAGE_GROUP>'
                                   || c_ap.page_group
                                   || '</PAGE_GROUP>');

            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'  <USER>'
                                   || v_user
                                   || '</USER>');
            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'  <PERIOD_NAME>'
                                   || p_period_name
                                   || '</PERIOD_NAME>');
            v_page_group := c_ap.page_group;
            j :=   j
                 + 1;
            k := 1;
         END IF;


         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'  <G_BATCH_NAME num="'
                                || i
                                || '">');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <BATCH_NAME>'
                                || xxfnd_utility_pkg.replace_for_xml(c_ap.batch_name)
                                || '</BATCH_NAME>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <INVOICE_AMOUNT>'
                                || c_ap.invoice_amount
                                || '</INVOICE_AMOUNT>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <INVOICE_ID>'
                                || c_ap.invoice_id
                                || '</INVOICE_ID>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <INVOICE_NUM>'
                                || xxfnd_utility_pkg.replace_for_xml(c_ap.invoice_num)
                                || '</INVOICE_NUM>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <ORG_ID>'
                                || c_ap.org_id
                                || '</ORG_ID>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <BANK_ACCOUNT_NUM>'
                                || c_ap.bank_account_num
                                || '</BANK_ACCOUNT_NUM>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <BANK_ACCOUNT_NAME>'
                                || c_ap.bank_account_name
                                || '</BANK_ACCOUNT_NAME>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <SEQ>'
                                || i
                                || '</SEQ>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <TAX_AMOUNT>'
                                || c_ap.tax_amount
                                || '</TAX_AMOUNT>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <TERMS_NAME>'
                                || c_ap.terms_name
                                || '</TERMS_NAME>');



         IF NVL(c_ap.total_seq, 'XXX') = 'XXX'
         THEN
            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'    <TOTAL_SEQ>'
                                   || k
                                   || '</TOTAL_SEQ>');
         ELSE
            apps.fnd_file.put_line(apps.fnd_file.output
                                  ,'    <TOTAL_SEQ>'
                                   || c_ap.total_seq
                                   || '</TOTAL_SEQ>');
         END IF;

         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <INVOICE_SUM>'
                                || c_ap.invoice_sum
                                || '</INVOICE_SUM>');

         BEGIN
            SELECT DECODE(LENGTH(h.vat_registration_num), 8, h.vat_registration_num, '')
              INTO v_registration_num
              FROM po_vendors h
             WHERE 1 = 1
                   AND h.vendor_id = c_ap.vendor_id;
         EXCEPTION
            WHEN OTHERS
            THEN
               v_registration_num := '';
         END;

         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <VENDOR_NAME>'
                                || xxfnd_utility_pkg.replace_for_xml(c_ap.vendor_name)
                                || '</VENDOR_NAME>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <REGISTRATION_NUM>'
                                || v_registration_num
                                || '</REGISTRATION_NUM>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <DUE_DATE>'
                                || c_ap.due_date
                                || '</DUE_DATE>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'    <PAYMENT_METHOD_NAME>'
                                || c_ap.payment_method_name
                                || '</PAYMENT_METHOD_NAME>');
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'  </G_BATCH_NAME>');


         i :=   i
              + 1;
         k :=   k
              + 1;
      END LOOP;

      IF v_page_group IS NOT NULL
      THEN
         apps.fnd_file.put_line(apps.fnd_file.output
                               ,'</G_PAY_GROUP>');
      END IF;

      apps.fnd_file.put_line(apps.fnd_file.output
                            ,'</ROWSET>');
   EXCEPTION
      WHEN v_call_error
      THEN
         retcode := 2;
      WHEN v_error
      THEN
         retcode := 2;
         errbuf := errbuf
                   || CHR(10)
                   || '追縱報錯程式:'
                   || CHR(10)
                   || DBMS_UTILITY.format_error_stack
                   || DBMS_UTILITY.format_error_backtrace
                   || DBMS_UTILITY.format_call_stack;
      WHEN OTHERS
      THEN
         retcode := 2;
         errbuf := errbuf
                   || CHR(10)
                   || '追縱報錯程式:'
                   || CHR(10)
                   || DBMS_UTILITY.format_error_stack
                   || DBMS_UTILITY.format_error_backtrace
                   || DBMS_UTILITY.format_call_stack;
   END main;
-------------------------------------------------------------------------------------
END xxapry008_pkg;
/


